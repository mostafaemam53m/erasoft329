أولاً: مفهوم Dependency Injection
1.1 تعريف المصطلح
Dependency Injection (DI) هي تقنية في تصميم البرمجيات تُستخدم لتمرير الكائنات التي تعتمد عليها كائنات أخرى عوضًا عن إنشائها داخلها. هذا يعزز مبدأ "عكس السيطرة" (Inversion of Control)، والذي يُعد من المبادئ الأساسية في التصميم الجيد للكود.

1.2 لماذا نستخدم Dependency Injection؟
تسهيل الاختبار (Testing): يمكن استبدال التبعيات في الاختبارات بنماذج وهمية (Mocks).

تحسين إعادة الاستخدام (Reusability): الكائنات لا تعتمد على تفاصيل تنفيذية محددة، بل تعتمد على واجهات عامة.

تقليل التكرار: تُدار التبعيات من مكان مركزي بدلًا من إعادة إنشائها في كل مكان.

1.3 أنواع حقن التبعيات
Constructor Injection: تمرير التبعيات عبر مُنشئ الكائن.

Setter Injection: تمرير التبعيات من خلال دوال Setter.

Method Injection: تمرير التبعيات مباشرة إلى الدوال عند استدعائها.

ثانيًا: ما هو Service Container؟
2.1 تعريف Service Container
Service Container هو أداة برمجية مركزية تُستخدم في Laravel لإدارة وإنشاء الكائنات المطلوبة تلقائيًا. ويعد القلب النابض لنظام Dependency Injection في Laravel.

2.2 فوائد Service Container
إدارة التبعيات تلقائيًا.

ربط الواجهات بالتنفيذات.

إنشاء Singleton أو Bind جديد بسهولة.

دعم مبدأ فصل الاهتمامات (Separation of Concerns).

2.3 الفرق بين Service Container و Dependency Injection
العنصر	Dependency Injection	Service Container
النوع	تقنية تصميم	أداة داخل Laravel
الغرض	تمرير التبعيات بدلاً من إنشائها	تسجيل وإنشاء التبعيات تلقائيًا
الاستخدام في Laravel	يُنفّذ عبر الكونستركتر وغيره	يُستخدم داخليًا لتنفيذ DI

ثالثًا: كيفية عمل Service Container في Laravel
3.1 تسجيل Bindings
php
Copy
Edit
app()->bind('PaymentService', function () {
    return new PaymentService();
});
3.2 إنشاء الكائن (Resolve)
php
Copy
Edit
$payment = app()->make('PaymentService');
3.3 Singleton مقابل Bind
php
Copy
Edit
app()->singleton('Logger', function () {
    return new FileLogger();
});
الفرق أن Singleton يُنشئ نسخة واحدة فقط تُعاد كل مرة، أما Bind فينشئ نسخة جديدة في كل مرة.

رابعًا: تطبيق عملي في Laravel
4.1 كود بسيط باستخدام Dependency Injection
php
Copy
Edit
class NotificationService {
    public function send($message) {
        echo "Sending: $message";
    }
}

class UserController {
    protected $notifier;

    public function __construct(NotificationService $notifier) {
        $this->notifier = $notifier;
    }

    public function notifyUser() {
        $this->notifier->send("Welcome!");
    }
}
Laravel تلقائيًا يستخدم Service Container لتمرير NotificationService إلى UserController دون الحاجة لكتابته يدويًا.

خامسًا: أهمية الجمع بين DI و Service Container
سهولة التوسيع: يمكن استبدال أي خدمة بأخرى بسهولة دون تعديل جوهري في الكود.

المرونة: تسمح بتطوير أجزاء مستقلة وقابلة للتغيير.

قابلية الإختبار: تصبح الاختبارات أكثر بساطة ودقة باستخدام Mocked Dependencies.

